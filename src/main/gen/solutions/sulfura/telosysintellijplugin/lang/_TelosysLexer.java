// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TelosysLexer.flex

package solutions.sulfura.telosysintellijplugin.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import solutions.sulfura.telosysintellijplugin.lang.parser.TelosysTypes;
import solutions.sulfura.telosysintellijplugin.lang.psi.TelosysElementType;
import solutions.sulfura.telosysintellijplugin.lang.psi.TelosysTokenType;

import java.util.ArrayList;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static solutions.sulfura.telosysintellijplugin.lang.parser.TelosysTypes.*;


public class _TelosysLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int TAG = 4;
  public static final int DECORATOR_CONTENT = 6;
  public static final int LINE_COMMENT = 8;
  public static final int BLOCK_COMMENT = 10;
  public static final int ENTITY = 12;
  public static final int ENTITY_BODY = 14;
  public static final int ATTRIBUTE = 16;
  public static final int ATTRIBUTE_METADATA = 18;
  public static final int POST_DECORATOR_NAME = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\4\0\1\6\1\7\1\10\1\0\1\11"+
    "\1\0\1\12\1\13\12\14\1\15\1\16\4\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\27\1\40\1\41\1\42\1\43\1\44\4\27\1\45"+
    "\1\0\1\46\1\0\1\27\1\0\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\0\1\102\7\0\1\3\32\0\1\1\11\0\1\27"+
    "\12\0\1\27\4\0\1\27\5\0\27\27\1\0\37\27"+
    "\1\0\u01ca\27\4\0\14\27\16\0\5\27\7\0\1\27"+
    "\1\0\1\27\21\0\165\27\1\0\2\27\2\0\4\27"+
    "\1\0\1\27\6\0\1\27\1\0\3\27\1\0\1\27"+
    "\1\0\24\27\1\0\123\27\1\0\213\27\1\0\255\27"+
    "\1\0\46\27\2\0\1\27\6\0\51\27\10\0\55\27"+
    "\1\0\1\27\1\0\2\27\1\0\2\27\1\0\1\27"+
    "\10\0\33\27\4\0\4\27\35\0\13\27\5\0\100\27"+
    "\12\14\4\0\146\27\1\0\10\27\2\0\12\27\1\0"+
    "\6\27\12\14\3\27\2\0\1\27\20\0\73\27\2\0"+
    "\145\27\16\0\12\14\54\27\4\0\1\27\2\0\1\27"+
    "\2\0\56\27\22\0\34\27\4\0\13\27\65\0\25\27"+
    "\1\0\10\27\25\0\17\27\1\0\201\27\2\0\12\14"+
    "\1\0\23\27\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\1\27\3\0\4\27\2\0\11\27"+
    "\2\0\2\27\2\0\4\27\10\0\1\27\4\0\2\27"+
    "\1\0\5\27\2\0\12\14\2\27\12\0\1\27\1\0"+
    "\1\27\2\0\3\27\1\0\6\27\4\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\2\27\1\0\2\27\1\0"+
    "\2\27\2\0\1\27\1\0\5\27\4\0\2\27\2\0"+
    "\3\27\3\0\1\27\7\0\4\27\1\0\1\27\7\0"+
    "\12\14\6\27\13\0\3\27\1\0\11\27\1\0\3\27"+
    "\1\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27"+
    "\2\0\12\27\1\0\3\27\1\0\3\27\2\0\1\27"+
    "\17\0\4\27\2\0\12\14\11\0\7\27\1\0\3\27"+
    "\1\0\10\27\2\0\2\27\2\0\26\27\1\0\7\27"+
    "\1\0\2\27\1\0\5\27\2\0\11\27\2\0\2\27"+
    "\2\0\3\27\10\0\2\27\4\0\2\27\1\0\5\27"+
    "\2\0\12\14\1\0\1\27\20\0\2\27\1\0\6\27"+
    "\3\0\3\27\1\0\4\27\3\0\2\27\1\0\1\27"+
    "\1\0\2\27\3\0\2\27\3\0\3\27\3\0\14\27"+
    "\4\0\5\27\3\0\3\27\1\0\4\27\2\0\1\27"+
    "\6\0\1\27\16\0\12\14\20\0\15\27\1\0\3\27"+
    "\1\0\27\27\1\0\20\27\3\0\10\27\1\0\3\27"+
    "\1\0\4\27\7\0\2\27\1\0\3\27\5\0\4\27"+
    "\2\0\12\14\20\0\4\27\1\0\10\27\1\0\3\27"+
    "\1\0\27\27\1\0\12\27\1\0\5\27\2\0\11\27"+
    "\1\0\3\27\1\0\4\27\7\0\2\27\7\0\1\27"+
    "\1\0\4\27\2\0\12\14\1\0\2\27\15\0\4\27"+
    "\1\0\10\27\1\0\3\27\1\0\63\27\1\0\3\27"+
    "\1\0\5\27\5\0\4\27\7\0\5\27\2\0\12\14"+
    "\12\0\6\27\2\0\2\27\1\0\22\27\3\0\30\27"+
    "\1\0\11\27\1\0\1\27\2\0\7\27\3\0\1\27"+
    "\4\0\6\27\1\0\1\27\1\0\10\27\6\0\12\14"+
    "\2\0\2\27\15\0\72\27\5\0\17\27\1\0\12\14"+
    "\47\0\2\27\1\0\1\27\1\0\5\27\1\0\30\27"+
    "\1\0\1\27\1\0\27\27\2\0\5\27\1\0\1\27"+
    "\1\0\6\27\2\0\12\14\2\0\4\27\40\0\1\27"+
    "\27\0\2\27\6\0\12\14\13\0\1\27\1\0\1\27"+
    "\1\0\1\27\4\0\12\27\1\0\44\27\4\0\24\27"+
    "\1\0\22\27\1\0\44\27\11\0\1\27\71\0\100\27"+
    "\12\14\6\0\100\27\12\14\4\27\2\0\46\27\1\0"+
    "\1\27\5\0\1\27\2\0\53\27\1\0\115\27\1\0"+
    "\4\27\2\0\7\27\1\0\1\27\1\0\4\27\2\0"+
    "\51\27\1\0\4\27\2\0\41\27\1\0\4\27\2\0"+
    "\7\27\1\0\1\27\1\0\4\27\2\0\17\27\1\0"+
    "\71\27\1\0\4\27\2\0\103\27\2\0\3\27\40\0"+
    "\20\27\20\0\126\27\2\0\6\27\3\0\u016c\27\2\0"+
    "\21\27\1\1\32\27\5\0\113\27\3\0\13\27\7\0"+
    "\15\27\1\0\7\27\13\0\25\27\13\0\24\27\14\0"+
    "\15\27\1\0\3\27\1\0\2\27\14\0\124\27\3\0"+
    "\1\27\4\0\2\27\2\0\12\14\41\0\3\27\2\0"+
    "\12\14\6\0\131\27\7\0\53\27\5\0\106\27\12\0"+
    "\37\27\1\0\14\27\4\0\14\27\12\0\12\14\36\27"+
    "\2\0\5\27\13\0\54\27\4\0\32\27\6\0\12\14"+
    "\46\0\34\27\4\0\77\27\1\0\35\27\2\0\1\27"+
    "\12\14\6\0\12\14\15\0\1\27\10\0\17\27\101\0"+
    "\114\27\4\0\12\14\21\0\11\27\14\0\60\27\12\14"+
    "\72\27\14\0\70\27\10\0\12\14\3\0\3\27\12\14"+
    "\44\27\2\0\11\27\7\0\53\27\2\0\3\27\20\0"+
    "\3\27\1\0\47\27\5\0\372\27\1\0\33\27\2\0"+
    "\6\27\2\0\46\27\2\0\6\27\2\0\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0"+
    "\65\27\1\0\7\27\1\0\1\27\3\0\3\27\1\0"+
    "\7\27\3\0\4\27\2\0\6\27\4\0\15\27\5\0"+
    "\3\27\1\0\7\27\3\0\13\1\35\0\2\3\5\0"+
    "\1\1\17\0\2\27\23\0\1\27\12\0\1\1\21\0"+
    "\1\27\15\0\1\27\20\0\15\27\63\0\41\27\21\0"+
    "\1\27\4\0\1\27\2\0\12\27\1\0\1\27\3\0"+
    "\5\27\6\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0"+
    "\1\27\21\0\51\27\u022d\0\64\27\26\0\57\27\1\0"+
    "\57\27\1\0\205\27\6\0\11\27\14\0\46\27\1\0"+
    "\1\27\5\0\1\27\2\0\70\27\7\0\1\27\17\0"+
    "\30\27\11\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\40\27\57\0\1\27\320\0\1\1\4\0"+
    "\3\27\31\0\17\27\1\0\5\27\2\0\5\27\4\0"+
    "\126\27\2\0\2\27\2\0\3\27\1\0\132\27\1\0"+
    "\4\27\5\0\53\27\1\0\136\27\21\0\33\27\65\0"+
    "\306\27\112\0\360\27\20\0\215\27\103\0\56\27\2\0"+
    "\15\27\3\0\20\27\12\14\2\27\24\0\63\27\1\0"+
    "\12\27\1\0\163\27\45\0\11\27\2\0\147\27\2\0"+
    "\65\27\2\0\5\27\60\0\61\27\30\0\64\27\14\0"+
    "\106\27\12\0\12\14\6\0\30\27\3\0\1\27\1\0"+
    "\3\27\12\14\44\27\2\0\44\27\14\0\35\27\3\0"+
    "\101\27\16\0\1\27\12\14\6\0\20\27\12\14\5\27"+
    "\1\0\67\27\11\0\16\27\2\0\12\14\6\0\27\27"+
    "\3\0\111\27\30\0\3\27\2\0\20\27\2\0\5\27"+
    "\12\0\6\27\2\0\6\27\2\0\6\27\11\0\7\27"+
    "\1\0\7\27\1\0\53\27\1\0\14\27\10\0\173\27"+
    "\1\0\2\27\2\0\12\14\6\0\244\27\14\0\27\27"+
    "\4\0\61\27\4\0\u0100\103\156\27\2\0\152\27\46\0"+
    "\7\27\14\0\5\27\5\0\14\27\1\0\15\27\1\0"+
    "\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0"+
    "\154\27\41\0\153\27\22\0\100\27\2\0\66\27\50\0"+
    "\14\27\4\0\20\27\20\0\20\27\3\0\2\27\30\0"+
    "\3\27\40\0\5\27\1\0\207\27\23\0\12\14\7\0"+
    "\32\27\4\0\1\27\1\0\32\27\13\0\131\27\3\0"+
    "\6\27\2\0\6\27\2\0\6\27\2\0\3\27\43\0"+
    "\14\27\1\0\32\27\1\0\23\27\1\0\2\27\1\0"+
    "\17\27\2\0\16\27\42\0\173\27\105\0\65\27\210\0"+
    "\1\27\202\0\35\27\3\0\61\27\17\0\1\27\37\0"+
    "\40\27\15\0\36\27\5\0\53\27\5\0\36\27\2\0"+
    "\44\27\4\0\10\27\1\0\5\27\52\0\236\27\2\0"+
    "\12\14\6\0\44\27\4\0\44\27\4\0\50\27\10\0"+
    "\64\27\234\0\67\27\11\0\26\27\12\0\10\27\230\0"+
    "\6\27\2\0\1\27\1\0\54\27\1\0\2\27\3\0"+
    "\1\27\2\0\27\27\12\0\27\27\11\0\37\27\101\0"+
    "\23\27\1\0\2\27\12\0\26\27\12\0\32\27\106\0"+
    "\70\27\6\0\2\27\100\0\4\27\1\0\2\27\5\0"+
    "\10\27\1\0\3\27\1\0\35\27\2\0\3\27\4\0"+
    "\1\27\40\0\35\27\3\0\35\27\43\0\10\27\1\0"+
    "\36\27\31\0\66\27\12\0\26\27\12\0\23\27\15\0"+
    "\22\27\156\0\111\27\67\0\63\27\15\0\63\27\15\0"+
    "\50\27\10\0\12\14\306\0\35\27\12\0\1\27\10\0"+
    "\41\27\217\0\27\27\11\0\107\27\37\0\12\14\17\0"+
    "\74\27\25\0\31\27\7\0\12\14\6\0\65\27\1\0"+
    "\12\14\4\0\3\27\11\0\44\27\2\0\1\27\11\0"+
    "\105\27\4\0\4\27\3\0\12\14\1\27\1\0\1\27"+
    "\43\0\22\27\1\0\45\27\6\0\1\27\101\0\7\27"+
    "\1\0\1\27\1\0\4\27\1\0\17\27\1\0\12\27"+
    "\7\0\73\27\5\0\12\14\6\0\4\27\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\5\27\1\0\12\27\2\0\2\27\2\0\3\27"+
    "\2\0\1\27\6\0\1\27\5\0\7\27\2\0\7\27"+
    "\3\0\5\27\213\0\113\27\5\0\12\14\4\0\2\27"+
    "\40\0\106\27\1\0\1\27\10\0\12\14\246\0\66\27"+
    "\2\0\11\27\27\0\6\27\42\0\101\27\3\0\1\27"+
    "\13\0\12\14\46\0\71\27\7\0\12\14\66\0\33\27"+
    "\2\0\17\27\4\0\12\14\306\0\73\27\145\0\100\27"+
    "\12\14\25\0\1\27\240\0\10\27\2\0\56\27\2\0"+
    "\10\27\1\0\2\27\33\0\77\27\10\0\1\27\10\0"+
    "\112\27\3\0\1\27\42\0\71\27\7\0\11\27\1\0"+
    "\55\27\1\0\11\27\17\0\12\14\30\0\36\27\2\0"+
    "\26\27\1\0\16\27\111\0\7\27\1\0\2\27\1\0"+
    "\54\27\3\0\1\27\1\0\2\27\1\0\11\27\10\0"+
    "\12\14\6\0\6\27\1\0\2\27\1\0\45\27\1\0"+
    "\2\27\1\0\6\27\7\0\12\14\u0136\0\27\27\11\0"+
    "\232\27\146\0\157\27\21\0\304\27\274\0\57\27\321\0"+
    "\107\27\271\0\71\27\7\0\37\27\1\0\12\14\146\0"+
    "\36\27\2\0\5\27\13\0\67\27\11\0\4\27\14\0"+
    "\12\14\11\0\25\27\5\0\23\27\260\0\100\27\200\0"+
    "\113\27\4\0\71\27\7\0\21\27\100\0\2\27\1\0"+
    "\1\27\34\0\370\27\10\0\363\27\15\0\37\27\61\0"+
    "\3\27\21\0\4\27\10\0\u018c\27\4\0\153\27\5\0"+
    "\15\27\3\0\11\27\7\0\12\27\3\0\2\27\306\0"+
    "\5\27\3\0\6\27\10\0\10\27\2\0\7\27\36\0"+
    "\4\27\224\0\3\27\273\0\125\27\1\0\107\27\1\0"+
    "\2\27\2\0\1\27\2\0\2\27\2\0\4\27\1\0"+
    "\14\27\1\0\1\27\1\0\7\27\1\0\101\27\1\0"+
    "\4\27\2\0\10\27\1\0\7\27\1\0\34\27\1\0"+
    "\4\27\1\0\5\27\1\0\1\27\3\0\7\27\1\0"+
    "\u0154\27\2\0\31\27\1\0\31\27\1\0\37\27\1\0"+
    "\31\27\1\0\37\27\1\0\31\27\1\0\37\27\1\0"+
    "\31\27\1\0\37\27\1\0\31\27\1\0\10\27\2\0"+
    "\62\14\67\27\4\0\62\27\10\0\1\27\16\0\1\27"+
    "\26\0\5\27\1\0\17\27\120\0\7\27\1\0\21\27"+
    "\2\0\7\27\1\0\2\27\1\0\5\27\325\0\55\27"+
    "\3\0\16\27\2\0\12\14\4\0\1\27\u0171\0\60\27"+
    "\12\14\6\0\305\27\13\0\7\27\51\0\114\27\4\0"+
    "\12\14\246\0\4\27\1\0\33\27\1\0\2\27\1\0"+
    "\1\27\2\0\1\27\1\0\12\27\1\0\4\27\1\0"+
    "\1\27\1\0\1\27\6\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\1\27\2\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\2\27\1\0\1\27\2\0"+
    "\4\27\1\0\7\27\1\0\4\27\1\0\4\27\1\0"+
    "\1\27\1\0\12\27\1\0\21\27\5\0\3\27\1\0"+
    "\5\27\1\0\21\27\164\0\32\27\6\0\32\27\6\0"+
    "\32\27\166\0\327\27\51\0\65\27\13\0\336\27\2\0"+
    "\u0182\27\16\0\u0131\27\37\0\36\27\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\1\1\4\1\5\21\1"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\2\11\1\13"+
    "\1\14\2\13\1\1\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\10\23\1\24\1\25\1\26\1\27\1\30\12\0"+
    "\1\31\27\0\1\32\2\11\1\27\1\30\1\33\1\0"+
    "\13\23\34\0\1\31\17\0\2\11\7\23\1\34\4\23"+
    "\52\0\1\31\4\0\1\35\4\23\1\34\46\0\4\23"+
    "\35\0\3\23\5\0\1\31\20\0\1\23\14\0\1\23"+
    "\33\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u02ec\0\u0374\0\u03b8"+
    "\0\u02ec\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u02ec\0\u02ec\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u02ec\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u02ec\0\u02ec\0\u02ec\0\u02ec\0\u02ec\0\u0b6c\0\u0bb0\0\u0bf4"+
    "\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u02ec\0\u02ec\0\u02ec"+
    "\0\u02ec\0\u02ec\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u02ec\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u08c4\0\u08c4\0\u160c\0\u1650\0\u0a18"+
    "\0\u0a18\0\u02ec\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u02ec\0\u25fc\0\u2640\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u0b6c\0\u2794\0\u27d8\0\u281c\0\u2860"+
    "\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u0908"+
    "\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c"+
    "\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c"+
    "\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c"+
    "\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc"+
    "\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc"+
    "\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc"+
    "\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c"+
    "\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c"+
    "\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u05d8\0\u4dd4\0\u4e18"+
    "\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038"+
    "\0\u507c\0\u50c0\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258"+
    "\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478"+
    "\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698"+
    "\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8"+
    "\0\u58fc\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5a50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\3\15\1\14\1\16\5\14\1\17\1\20\2\14"+
    "\1\21\25\20\2\14\32\20\16\14\1\17\4\14\1\22"+
    "\1\14\1\23\1\24\1\25\1\26\1\27\1\14\1\30"+
    "\1\31\1\14\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\53\14\1\17\1\43\3\14\25\43"+
    "\2\14\32\43\4\14\3\15\1\44\2\14\1\45\1\14"+
    "\1\46\1\47\1\17\1\50\3\14\25\47\2\14\5\47"+
    "\1\51\15\47\1\52\6\47\3\14\2\53\1\54\10\53"+
    "\1\55\70\53\10\56\1\57\2\56\1\17\70\56\1\14"+
    "\3\15\7\14\1\17\1\60\1\61\1\62\1\14\25\60"+
    "\2\14\32\60\1\63\1\64\2\14\3\15\7\14\1\17"+
    "\1\60\1\61\1\62\1\14\25\60\2\14\32\60\1\65"+
    "\1\64\2\14\3\15\7\14\1\17\1\66\1\61\1\62"+
    "\1\14\25\66\2\14\1\66\1\67\1\66\1\70\1\66"+
    "\1\71\2\66\1\72\2\66\1\73\6\66\1\74\1\75"+
    "\6\66\1\65\1\76\2\14\3\15\1\14\1\16\5\14"+
    "\1\17\1\66\1\14\1\62\1\21\25\66\2\14\1\66"+
    "\1\67\1\66\1\70\1\66\1\71\2\66\1\72\2\66"+
    "\1\73\6\66\1\74\1\75\6\66\1\65\1\76\2\14"+
    "\3\15\1\14\1\16\1\77\5\14\1\100\2\14\1\21"+
    "\25\100\2\14\32\100\1\14\1\100\1\14\105\0\3\15"+
    "\110\0\1\101\2\0\1\102\104\0\1\20\3\0\25\20"+
    "\2\0\32\20\53\0\1\103\4\0\1\104\15\0\1\105"+
    "\57\0\1\106\15\0\1\107\66\0\1\110\2\0\1\111"+
    "\11\0\1\112\101\0\1\113\12\0\1\114\37\0\1\115"+
    "\20\0\1\116\17\0\1\117\63\0\1\120\102\0\1\115"+
    "\11\0\1\121\104\0\1\122\65\0\1\123\7\0\1\124"+
    "\5\0\1\125\65\0\1\126\7\0\1\127\111\0\1\130"+
    "\66\0\1\131\13\0\1\132\1\0\1\133\1\0\1\134"+
    "\62\0\1\135\20\0\1\136\66\0\1\137\107\0\1\140"+
    "\114\0\1\141\77\0\1\142\1\0\1\143\31\0\1\43"+
    "\3\0\25\43\2\0\32\43\3\0\2\144\2\0\1\145"+
    "\76\144\13\0\1\47\1\0\1\47\3\0\25\47\2\0"+
    "\32\47\15\0\1\47\1\0\1\50\3\0\25\47\2\0"+
    "\32\47\15\0\1\47\1\0\1\47\3\0\25\47\2\0"+
    "\1\146\31\47\15\0\1\47\1\0\1\47\3\0\25\47"+
    "\2\0\21\47\1\147\10\47\3\0\2\53\1\0\103\53"+
    "\1\0\5\53\1\150\2\53\1\151\70\53\10\56\1\0"+
    "\2\56\1\0\70\56\13\0\1\152\104\0\1\60\3\0"+
    "\25\60\1\153\1\0\32\60\17\0\1\66\3\0\25\66"+
    "\1\153\1\0\32\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\10\66\1\154\5\66\1\155\11\66\1\156\1\66"+
    "\17\0\1\66\3\0\25\66\1\153\1\0\1\156\3\66"+
    "\1\157\11\66\1\160\13\66\17\0\1\66\3\0\25\66"+
    "\1\153\1\0\13\66\1\161\16\66\17\0\1\66\3\0"+
    "\25\66\1\153\1\0\15\66\1\162\14\66\17\0\1\66"+
    "\3\0\25\66\1\153\1\0\16\66\1\163\13\66\17\0"+
    "\1\66\3\0\25\66\1\153\1\0\7\66\1\164\13\66"+
    "\1\165\6\66\17\0\1\66\3\0\25\66\1\153\1\0"+
    "\10\66\1\166\21\66\74\0\1\167\67\0\1\170\120\0"+
    "\1\171\102\0\1\172\76\0\1\173\41\0\1\174\1\175"+
    "\11\0\1\176\3\0\1\177\1\200\1\0\1\201\113\0"+
    "\1\202\112\0\1\203\70\0\1\204\125\0\1\205\103\0"+
    "\1\206\103\0\1\207\75\0\1\210\53\0\1\211\22\0"+
    "\1\212\6\0\1\213\2\0\1\214\71\0\1\215\74\0"+
    "\1\216\117\0\1\217\103\0\1\220\103\0\1\221\1\0"+
    "\1\222\7\0\1\223\71\0\1\223\111\0\1\224\71\0"+
    "\1\225\76\0\1\226\122\0\1\227\77\0\1\230\66\0"+
    "\1\231\17\0\1\232\1\233\70\0\1\234\73\0\1\235"+
    "\134\0\1\236\52\0\1\237\113\0\1\240\11\0\1\241"+
    "\64\0\1\242\43\0\1\47\1\0\1\47\3\0\25\47"+
    "\2\0\13\47\1\243\16\47\15\0\1\47\1\0\1\47"+
    "\3\0\25\47\2\0\24\47\1\244\5\47\51\0\1\245"+
    "\51\0\1\66\3\0\25\66\1\153\1\0\15\66\1\246"+
    "\14\66\17\0\1\66\3\0\25\66\1\153\1\0\16\66"+
    "\1\247\13\66\17\0\1\66\3\0\25\66\1\153\1\0"+
    "\23\66\1\250\6\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\2\66\1\251\27\66\17\0\1\66\3\0\25\66"+
    "\1\153\1\0\24\66\1\252\5\66\17\0\1\66\3\0"+
    "\25\66\1\153\1\0\16\66\1\253\13\66\17\0\1\66"+
    "\3\0\25\66\1\153\1\0\23\66\1\254\6\66\17\0"+
    "\1\66\3\0\25\66\1\153\1\0\15\66\1\255\14\66"+
    "\17\0\1\66\3\0\25\66\1\153\1\0\16\66\1\256"+
    "\13\66\17\0\1\66\3\0\25\66\1\153\1\0\21\66"+
    "\1\257\10\66\17\0\1\66\3\0\25\66\1\153\1\0"+
    "\14\66\1\260\15\66\75\0\1\261\101\0\1\262\100\0"+
    "\1\263\67\0\1\264\124\0\1\265\60\0\1\266\15\0"+
    "\1\267\71\0\1\111\77\0\1\270\105\0\1\271\5\0"+
    "\1\272\73\0\1\273\27\0\1\274\63\0\1\275\73\0"+
    "\1\276\103\0\1\277\107\0\1\300\103\0\1\301\101\0"+
    "\1\302\125\0\1\303\63\0\1\304\103\0\1\305\122\0"+
    "\1\306\104\0\1\307\63\0\1\310\114\0\1\311\72\0"+
    "\1\312\111\0\1\313\77\0\1\314\125\0\1\315\72\0"+
    "\1\316\50\0\1\317\71\0\1\320\2\0\1\321\10\0"+
    "\1\322\121\0\1\323\72\0\1\324\120\0\1\325\102\0"+
    "\1\326\106\0\1\327\114\0\1\115\103\0\1\330\74\0"+
    "\1\331\72\0\1\332\104\0\1\333\114\0\1\334\106\0"+
    "\1\335\73\0\1\336\73\0\1\337\46\0\1\47\1\0"+
    "\1\47\3\0\25\47\2\0\22\47\1\244\7\47\15\0"+
    "\1\47\1\0\1\47\3\0\25\47\2\0\4\47\1\340"+
    "\25\47\17\0\1\66\3\0\25\66\1\153\1\0\1\341"+
    "\31\66\17\0\1\66\3\0\25\66\1\153\1\0\13\66"+
    "\1\342\16\66\17\0\1\66\3\0\25\66\1\153\1\0"+
    "\4\66\1\254\25\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\10\66\1\343\21\66\17\0\1\66\3\0\25\66"+
    "\1\153\1\0\1\66\1\344\30\66\17\0\1\66\3\0"+
    "\25\66\1\153\1\0\1\162\31\66\17\0\1\66\3\0"+
    "\25\66\1\153\1\0\6\66\1\254\23\66\17\0\1\66"+
    "\3\0\25\66\1\153\1\0\21\66\1\162\10\66\17\0"+
    "\1\66\3\0\25\66\1\153\1\0\10\66\1\163\21\66"+
    "\17\0\1\66\3\0\25\66\1\153\1\0\4\66\1\345"+
    "\25\66\73\0\1\346\66\0\1\347\60\0\1\350\122\0"+
    "\1\351\107\0\1\352\122\0\1\353\74\0\1\354\103\0"+
    "\1\355\76\0\1\356\125\0\1\355\53\0\1\357\121\0"+
    "\1\355\70\0\1\360\123\0\1\361\67\0\1\362\76\0"+
    "\1\363\115\0\1\364\75\0\1\365\115\0\1\355\103\0"+
    "\1\366\76\0\1\367\77\0\1\370\116\0\1\371\101\0"+
    "\1\337\37\0\1\372\141\0\1\115\42\0\1\373\124\0"+
    "\1\265\103\0\1\374\114\0\1\375\103\0\1\362\112\0"+
    "\1\376\104\0\1\377\113\0\1\u0100\61\0\1\307\117\0"+
    "\1\u0101\103\0\1\u0102\65\0\1\u0103\103\0\1\u0104\107\0"+
    "\1\u0105\107\0\1\u0106\62\0\1\u0107\101\0\1\u0108\140\0"+
    "\1\u0109\105\0\1\355\65\0\1\u010a\120\0\1\u010b\25\0"+
    "\1\66\3\0\25\66\1\153\1\0\21\66\1\u010c\10\66"+
    "\17\0\1\66\3\0\25\66\1\153\1\0\4\66\1\u010d"+
    "\25\66\17\0\1\66\3\0\25\66\1\153\1\0\14\66"+
    "\1\u010e\15\66\17\0\1\66\3\0\25\66\1\153\1\0"+
    "\13\66\1\250\16\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\22\66\1\u010f\7\66\52\0\1\u0110\111\0\1\u0111"+
    "\112\0\1\u0112\71\0\1\355\127\0\1\232\54\0\1\u0113"+
    "\117\0\1\u0114\73\0\1\115\103\0\1\u0115\112\0\1\u0116"+
    "\116\0\1\115\70\0\1\u0117\105\0\1\115\71\0\1\u0118"+
    "\103\0\1\u0119\73\0\1\u011a\110\0\1\u011b\121\0\1\u011c"+
    "\65\0\1\u011d\76\0\1\u011e\125\0\1\u011f\116\0\1\u0120"+
    "\71\0\1\u0121\70\0\1\u0122\100\0\1\u0123\122\0\1\u0124"+
    "\77\0\1\312\57\0\1\u0125\131\0\1\u0126\103\0\1\u0127"+
    "\74\0\1\355\116\0\1\362\105\0\1\u0128\75\0\1\u0129"+
    "\66\0\1\u012a\7\0\1\362\103\0\1\u0114\110\0\1\u012b"+
    "\66\0\1\u012c\50\0\1\66\3\0\25\66\1\153\1\0"+
    "\30\66\1\254\1\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\1\u012d\31\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\1\u012e\31\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\23\66\1\u012f\6\66\54\0\1\232\101\0\1\u0130"+
    "\105\0\1\u0131\114\0\1\u0132\74\0\1\u0133\113\0\1\u0134"+
    "\73\0\1\u0135\122\0\1\u0136\64\0\1\u0137\121\0\1\115"+
    "\111\0\1\u0138\76\0\1\u0139\101\0\1\u013a\75\0\1\u0136"+
    "\120\0\1\274\76\0\1\u013b\31\0\1\u013c\4\0\1\u013d"+
    "\3\0\1\u013e\106\0\1\u013f\70\0\1\u0140\146\0\1\u0141"+
    "\111\0\1\u0140\75\0\1\355\66\0\1\312\74\0\1\u0142"+
    "\122\0\1\u0143\106\0\1\u0140\117\0\1\115\60\0\1\u0144"+
    "\100\0\1\u0145\47\0\1\66\3\0\25\66\1\153\1\0"+
    "\15\66\1\254\14\66\17\0\1\66\3\0\25\66\1\153"+
    "\1\0\13\66\1\254\16\66\17\0\1\66\3\0\25\66"+
    "\1\153\1\0\1\u0146\31\66\75\0\1\u0147\101\0\1\u0148"+
    "\100\0\1\u0149\102\0\1\232\66\0\1\115\125\0\1\u014a"+
    "\56\0\1\u014b\111\0\1\115\117\0\1\u014c\70\0\1\u014d"+
    "\127\0\1\u014e\63\0\1\u0124\116\0\1\u014f\43\0\1\115"+
    "\120\0\1\u0150\133\0\1\115\65\0\1\115\75\0\1\u0151"+
    "\124\0\1\u0152\61\0\1\371\113\0\1\355\35\0\1\66"+
    "\3\0\25\66\1\153\1\0\14\66\1\u0153\15\66\56\0"+
    "\1\u0154\103\0\1\u0155\105\0\1\115\114\0\1\u0156\64\0"+
    "\1\u0157\107\0\1\u0158\102\0\1\u0136\71\0\1\u0159\135\0"+
    "\1\u015a\75\0\1\u0140\102\0\1\u015b\73\0\1\371\44\0"+
    "\1\66\3\0\25\66\1\153\1\0\17\66\1\254\12\66"+
    "\43\0\1\u015c\126\0\1\u015d\67\0\1\u015e\116\0\1\335"+
    "\45\0\1\u015f\6\0\1\u0160\123\0\1\u0161\120\0\1\115"+
    "\100\0\1\u0162\103\0\1\u0163\71\0\1\u0164\101\0\1\355"+
    "\101\0\1\u0165\103\0\1\u0166\122\0\1\u0167\111\0\1\u0126"+
    "\74\0\1\232\102\0\1\u0168\74\0\1\u0169\126\0\1\u0140"+
    "\70\0\1\u016a\110\0\1\u0118\64\0\1\u015a\121\0\1\u016b"+
    "\71\0\1\u016c\116\0\1\u016d\76\0\1\u016e\106\0\1\u0140"+
    "\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[23188];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\2\1\1\11\23\1\2\11"+
    "\5\1\1\11\4\1\5\11\10\1\5\11\12\0\1\11"+
    "\27\0\5\1\1\11\1\0\13\1\34\0\1\1\17\0"+
    "\2\1\1\11\13\1\52\0\1\1\4\0\6\1\46\0"+
    "\4\1\35\0\3\1\5\0\1\1\20\0\1\1\14\0"+
    "\1\1\33\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    ArrayList<Integer> stateStack = new ArrayList<>();

    public _TelosysLexer() {
      this((java.io.Reader)null);
    }

    public void pushCurrentState(){
        stateStack.add(yystate());
    }

    public Integer popState(){
        return stateStack.remove(stateStack.size()-1);
    }

    public void logText(){
        //System.out.println("State: " + yystate() + ", Matched Input: " + yytext());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TelosysLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { logText(); return BAD_CHARACTER;
            }
          // fall through
          case 30: break;
          case 2:
            { logText(); return IGNORED;
            }
          // fall through
          case 31: break;
          case 3:
            { logText(); pushCurrentState(); yybegin(TAG); return SHARP;
            }
          // fall through
          case 32: break;
          case 4:
            { logText(); pushCurrentState(); yybegin(ENTITY); return ENTITY_NAME;
            }
          // fall through
          case 33: break;
          case 5:
            { logText(); pushCurrentState(); yybegin(ANNOTATION); return AT;
            }
          // fall through
          case 34: break;
          case 6:
            { logText(); yybegin(POST_DECORATOR_NAME); return TAG_NAME;
            }
          // fall through
          case 35: break;
          case 7:
            { logText(); yybegin(popState()); return new TelosysElementType(")");
            }
          // fall through
          case 36: break;
          case 8:
            { logText(); return new TelosysElementType(",");
            }
          // fall through
          case 37: break;
          case 9:
            { logText(); return NAME;
            }
          // fall through
          case 38: break;
          case 10:
            { logText(); return NUMBER;
            }
          // fall through
          case 39: break;
          case 11:
            { logText(); return COMMENT_TEXT;
            }
          // fall through
          case 40: break;
          case 12:
            { logText(); yybegin(popState()); return EOL;
            }
          // fall through
          case 41: break;
          case 13:
            { logText(); pushCurrentState(); yybegin(ATTRIBUTE); return ATTRIBUTE_NAME;
            }
          // fall through
          case 42: break;
          case 14:
            { logText(); yybegin(ATTRIBUTE_METADATA); return new TelosysElementType(":");
            }
          // fall through
          case 43: break;
          case 15:
            { logText(); yybegin(popState()); return new TelosysElementType(";");
            }
          // fall through
          case 44: break;
          case 16:
            { logText(); yybegin(ENTITY_BODY); return new TelosysElementType("{");
            }
          // fall through
          case 45: break;
          case 17:
            { logText(); yybegin(popState()); return new TelosysElementType("}");
            }
          // fall through
          case 46: break;
          case 18:
            { return new TelosysTokenType("{");
            }
          // fall through
          case 47: break;
          case 19:
            { logText(); return TelosysTypes.ENTITY_NAME;
            }
          // fall through
          case 48: break;
          case 20:
            { return new TelosysTokenType("}");
            }
          // fall through
          case 49: break;
          case 21:
            { logText(); yybegin(DECORATOR_CONTENT); return new TelosysElementType("(");
            }
          // fall through
          case 50: break;
          case 22:
            { logText(); yybegin(popState()); yypushback(1);
            }
          // fall through
          case 51: break;
          case 23:
            { logText(); pushCurrentState(); yybegin(BLOCK_COMMENT); return new TelosysElementType("/*");
            }
          // fall through
          case 52: break;
          case 24:
            { logText(); pushCurrentState(); yybegin(LINE_COMMENT); return new TelosysElementType("//");
            }
          // fall through
          case 53: break;
          case 25:
            { logText(); yybegin(POST_DECORATOR_NAME); return ANNOTATION_NAME;
            }
          // fall through
          case 54: break;
          case 26:
            { logText(); return STRING;
            }
          // fall through
          case 55: break;
          case 27:
            { logText(); yybegin(popState()); return new TelosysElementType("*/");
            }
          // fall through
          case 56: break;
          case 28:
            { logText(); return TelosysTypes.ATTRIBUTE_TYPE;
            }
          // fall through
          case 57: break;
          case 29:
            { logText(); return BOOLEAN;
            }
          // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
