// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TelosysLexer.flex

package solutions.sulfura.telosysintellijplugin.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import solutions.sulfura.telosysintellijplugin.lang.parser.TelosysTypes;
import solutions.sulfura.telosysintellijplugin.lang.psi.TelosysElementType;
import solutions.sulfura.telosysintellijplugin.lang.psi.TelosysTokenType;

import java.util.ArrayList;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static solutions.sulfura.telosysintellijplugin.lang.parser.TelosysTypes.*;


public class _TelosysLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int TAG = 4;
  public static final int DECORATOR_CONTENT = 6;
  public static final int LINE_COMMENT = 8;
  public static final int BLOCK_COMMENT = 10;
  public static final int ENTITY = 12;
  public static final int ENTITY_BODY = 14;
  public static final int ATTRIBUTE = 16;
  public static final int ATTRIBUTE_TYPE = 18;
  public static final int POST_DECORATOR_NAME = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\4\0\1\6\1\7\1\10\1\0\1\11"+
    "\1\0\1\12\1\13\12\14\1\15\1\16\4\0\1\17"+
    "\32\20\1\21\1\0\1\22\1\0\1\20\1\0\1\23"+
    "\3\20\1\24\1\25\5\20\1\26\5\20\1\27\1\30"+
    "\1\31\1\32\5\20\1\33\1\0\1\34\7\0\1\3"+
    "\32\0\1\1\11\0\1\20\12\0\1\20\4\0\1\20"+
    "\5\0\27\20\1\0\37\20\1\0\u01ca\20\4\0\14\20"+
    "\16\0\5\20\7\0\1\20\1\0\1\20\21\0\165\20"+
    "\1\0\2\20\2\0\4\20\1\0\1\20\6\0\1\20"+
    "\1\0\3\20\1\0\1\20\1\0\24\20\1\0\123\20"+
    "\1\0\213\20\1\0\255\20\1\0\46\20\2\0\1\20"+
    "\6\0\51\20\10\0\55\20\1\0\1\20\1\0\2\20"+
    "\1\0\2\20\1\0\1\20\10\0\33\20\4\0\4\20"+
    "\35\0\13\20\5\0\100\20\12\14\4\0\146\20\1\0"+
    "\10\20\2\0\12\20\1\0\6\20\12\14\3\20\2\0"+
    "\1\20\20\0\73\20\2\0\145\20\16\0\12\14\54\20"+
    "\4\0\1\20\2\0\1\20\2\0\56\20\22\0\34\20"+
    "\4\0\13\20\65\0\25\20\1\0\10\20\25\0\17\20"+
    "\1\0\201\20\2\0\12\14\1\0\23\20\1\0\10\20"+
    "\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20"+
    "\3\0\4\20\2\0\11\20\2\0\2\20\2\0\4\20"+
    "\10\0\1\20\4\0\2\20\1\0\5\20\2\0\12\14"+
    "\2\20\12\0\1\20\1\0\1\20\2\0\3\20\1\0"+
    "\6\20\4\0\2\20\2\0\26\20\1\0\7\20\1\0"+
    "\2\20\1\0\2\20\1\0\2\20\2\0\1\20\1\0"+
    "\5\20\4\0\2\20\2\0\3\20\3\0\1\20\7\0"+
    "\4\20\1\0\1\20\7\0\12\14\6\20\13\0\3\20"+
    "\1\0\11\20\1\0\3\20\1\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\5\20\2\0\12\20\1\0\3\20"+
    "\1\0\3\20\2\0\1\20\17\0\4\20\2\0\12\14"+
    "\11\0\7\20\1\0\3\20\1\0\10\20\2\0\2\20"+
    "\2\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20"+
    "\2\0\11\20\2\0\2\20\2\0\3\20\10\0\2\20"+
    "\4\0\2\20\1\0\5\20\2\0\12\14\1\0\1\20"+
    "\20\0\2\20\1\0\6\20\3\0\3\20\1\0\4\20"+
    "\3\0\2\20\1\0\1\20\1\0\2\20\3\0\2\20"+
    "\3\0\3\20\3\0\14\20\4\0\5\20\3\0\3\20"+
    "\1\0\4\20\2\0\1\20\6\0\1\20\16\0\12\14"+
    "\20\0\15\20\1\0\3\20\1\0\27\20\1\0\20\20"+
    "\3\0\10\20\1\0\3\20\1\0\4\20\7\0\2\20"+
    "\1\0\3\20\5\0\4\20\2\0\12\14\20\0\4\20"+
    "\1\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20"+
    "\1\0\5\20\2\0\11\20\1\0\3\20\1\0\4\20"+
    "\7\0\2\20\7\0\1\20\1\0\4\20\2\0\12\14"+
    "\1\0\2\20\15\0\4\20\1\0\10\20\1\0\3\20"+
    "\1\0\63\20\1\0\3\20\1\0\5\20\5\0\4\20"+
    "\7\0\5\20\2\0\12\14\12\0\6\20\2\0\2\20"+
    "\1\0\22\20\3\0\30\20\1\0\11\20\1\0\1\20"+
    "\2\0\7\20\3\0\1\20\4\0\6\20\1\0\1\20"+
    "\1\0\10\20\6\0\12\14\2\0\2\20\15\0\72\20"+
    "\5\0\17\20\1\0\12\14\47\0\2\20\1\0\1\20"+
    "\1\0\5\20\1\0\30\20\1\0\1\20\1\0\27\20"+
    "\2\0\5\20\1\0\1\20\1\0\6\20\2\0\12\14"+
    "\2\0\4\20\40\0\1\20\27\0\2\20\6\0\12\14"+
    "\13\0\1\20\1\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\44\20\4\0\24\20\1\0\22\20\1\0\44\20"+
    "\11\0\1\20\71\0\100\20\12\14\6\0\100\20\12\14"+
    "\4\20\2\0\46\20\1\0\1\20\5\0\1\20\2\0"+
    "\53\20\1\0\115\20\1\0\4\20\2\0\7\20\1\0"+
    "\1\20\1\0\4\20\2\0\51\20\1\0\4\20\2\0"+
    "\41\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0"+
    "\4\20\2\0\17\20\1\0\71\20\1\0\4\20\2\0"+
    "\103\20\2\0\3\20\40\0\20\20\20\0\126\20\2\0"+
    "\6\20\3\0\u016c\20\2\0\21\20\1\1\32\20\5\0"+
    "\113\20\3\0\13\20\7\0\15\20\1\0\7\20\13\0"+
    "\25\20\13\0\24\20\14\0\15\20\1\0\3\20\1\0"+
    "\2\20\14\0\124\20\3\0\1\20\4\0\2\20\2\0"+
    "\12\14\41\0\3\20\2\0\12\14\6\0\131\20\7\0"+
    "\53\20\5\0\106\20\12\0\37\20\1\0\14\20\4\0"+
    "\14\20\12\0\12\14\36\20\2\0\5\20\13\0\54\20"+
    "\4\0\32\20\6\0\12\14\46\0\34\20\4\0\77\20"+
    "\1\0\35\20\2\0\1\20\12\14\6\0\12\14\15\0"+
    "\1\20\10\0\17\20\101\0\114\20\4\0\12\14\21\0"+
    "\11\20\14\0\60\20\12\14\72\20\14\0\70\20\10\0"+
    "\12\14\3\0\3\20\12\14\44\20\2\0\11\20\7\0"+
    "\53\20\2\0\3\20\20\0\3\20\1\0\47\20\5\0"+
    "\372\20\1\0\33\20\2\0\6\20\2\0\46\20\2\0"+
    "\6\20\2\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\37\20\2\0\65\20\1\0\7\20\1\0"+
    "\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0"+
    "\6\20\4\0\15\20\5\0\3\20\1\0\7\20\3\0"+
    "\13\1\35\0\2\3\5\0\1\1\17\0\2\20\23\0"+
    "\1\20\12\0\1\1\21\0\1\20\15\0\1\20\20\0"+
    "\15\20\63\0\41\20\21\0\1\20\4\0\1\20\2\0"+
    "\12\20\1\0\1\20\3\0\5\20\6\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\4\20\1\0\13\20\2\0"+
    "\4\20\5\0\5\20\4\0\1\20\21\0\51\20\u022d\0"+
    "\64\20\26\0\57\20\1\0\57\20\1\0\205\20\6\0"+
    "\11\20\14\0\46\20\1\0\1\20\5\0\1\20\2\0"+
    "\70\20\7\0\1\20\17\0\30\20\11\0\7\20\1\0"+
    "\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0"+
    "\7\20\1\0\7\20\1\0\7\20\1\0\40\20\57\0"+
    "\1\20\320\0\1\1\4\0\3\20\31\0\17\20\1\0"+
    "\5\20\2\0\5\20\4\0\126\20\2\0\2\20\2\0"+
    "\3\20\1\0\132\20\1\0\4\20\5\0\53\20\1\0"+
    "\136\20\21\0\33\20\65\0\306\20\112\0\360\20\20\0"+
    "\215\20\103\0\56\20\2\0\15\20\3\0\20\20\12\14"+
    "\2\20\24\0\63\20\1\0\12\20\1\0\163\20\45\0"+
    "\11\20\2\0\147\20\2\0\65\20\2\0\5\20\60\0"+
    "\61\20\30\0\64\20\14\0\106\20\12\0\12\14\6\0"+
    "\30\20\3\0\1\20\1\0\3\20\12\14\44\20\2\0"+
    "\44\20\14\0\35\20\3\0\101\20\16\0\1\20\12\14"+
    "\6\0\20\20\12\14\5\20\1\0\67\20\11\0\16\20"+
    "\2\0\12\14\6\0\27\20\3\0\111\20\30\0\3\20"+
    "\2\0\20\20\2\0\5\20\12\0\6\20\2\0\6\20"+
    "\2\0\6\20\11\0\7\20\1\0\7\20\1\0\53\20"+
    "\1\0\14\20\10\0\173\20\1\0\2\20\2\0\12\14"+
    "\6\0\244\20\14\0\27\20\4\0\61\20\4\0\u0100\35"+
    "\156\20\2\0\152\20\46\0\7\20\14\0\5\20\5\0"+
    "\14\20\1\0\15\20\1\0\5\20\1\0\1\20\1\0"+
    "\2\20\1\0\2\20\1\0\154\20\41\0\153\20\22\0"+
    "\100\20\2\0\66\20\50\0\14\20\4\0\20\20\20\0"+
    "\20\20\3\0\2\20\30\0\3\20\40\0\5\20\1\0"+
    "\207\20\23\0\12\14\7\0\32\20\4\0\1\20\1\0"+
    "\32\20\13\0\131\20\3\0\6\20\2\0\6\20\2\0"+
    "\6\20\2\0\3\20\43\0\14\20\1\0\32\20\1\0"+
    "\23\20\1\0\2\20\1\0\17\20\2\0\16\20\42\0"+
    "\173\20\105\0\65\20\210\0\1\20\202\0\35\20\3\0"+
    "\61\20\17\0\1\20\37\0\40\20\15\0\36\20\5\0"+
    "\53\20\5\0\36\20\2\0\44\20\4\0\10\20\1\0"+
    "\5\20\52\0\236\20\2\0\12\14\6\0\44\20\4\0"+
    "\44\20\4\0\50\20\10\0\64\20\234\0\67\20\11\0"+
    "\26\20\12\0\10\20\230\0\6\20\2\0\1\20\1\0"+
    "\54\20\1\0\2\20\3\0\1\20\2\0\27\20\12\0"+
    "\27\20\11\0\37\20\101\0\23\20\1\0\2\20\12\0"+
    "\26\20\12\0\32\20\106\0\70\20\6\0\2\20\100\0"+
    "\4\20\1\0\2\20\5\0\10\20\1\0\3\20\1\0"+
    "\35\20\2\0\3\20\4\0\1\20\40\0\35\20\3\0"+
    "\35\20\43\0\10\20\1\0\36\20\31\0\66\20\12\0"+
    "\26\20\12\0\23\20\15\0\22\20\156\0\111\20\67\0"+
    "\63\20\15\0\63\20\15\0\50\20\10\0\12\14\306\0"+
    "\35\20\12\0\1\20\10\0\41\20\217\0\27\20\11\0"+
    "\107\20\37\0\12\14\17\0\74\20\25\0\31\20\7\0"+
    "\12\14\6\0\65\20\1\0\12\14\4\0\3\20\11\0"+
    "\44\20\2\0\1\20\11\0\105\20\4\0\4\20\3\0"+
    "\12\14\1\20\1\0\1\20\43\0\22\20\1\0\45\20"+
    "\6\0\1\20\101\0\7\20\1\0\1\20\1\0\4\20"+
    "\1\0\17\20\1\0\12\20\7\0\73\20\5\0\12\14"+
    "\6\0\4\20\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\1\0\12\20"+
    "\2\0\2\20\2\0\3\20\2\0\1\20\6\0\1\20"+
    "\5\0\7\20\2\0\7\20\3\0\5\20\213\0\113\20"+
    "\5\0\12\14\4\0\2\20\40\0\106\20\1\0\1\20"+
    "\10\0\12\14\246\0\66\20\2\0\11\20\27\0\6\20"+
    "\42\0\101\20\3\0\1\20\13\0\12\14\46\0\71\20"+
    "\7\0\12\14\66\0\33\20\2\0\17\20\4\0\12\14"+
    "\306\0\73\20\145\0\100\20\12\14\25\0\1\20\240\0"+
    "\10\20\2\0\56\20\2\0\10\20\1\0\2\20\33\0"+
    "\77\20\10\0\1\20\10\0\112\20\3\0\1\20\42\0"+
    "\71\20\7\0\11\20\1\0\55\20\1\0\11\20\17\0"+
    "\12\14\30\0\36\20\2\0\26\20\1\0\16\20\111\0"+
    "\7\20\1\0\2\20\1\0\54\20\3\0\1\20\1\0"+
    "\2\20\1\0\11\20\10\0\12\14\6\0\6\20\1\0"+
    "\2\20\1\0\45\20\1\0\2\20\1\0\6\20\7\0"+
    "\12\14\u0136\0\27\20\11\0\232\20\146\0\157\20\21\0"+
    "\304\20\274\0\57\20\321\0\107\20\271\0\71\20\7\0"+
    "\37\20\1\0\12\14\146\0\36\20\2\0\5\20\13\0"+
    "\67\20\11\0\4\20\14\0\12\14\11\0\25\20\5\0"+
    "\23\20\260\0\100\20\200\0\113\20\4\0\71\20\7\0"+
    "\21\20\100\0\2\20\1\0\1\20\34\0\370\20\10\0"+
    "\363\20\15\0\37\20\61\0\3\20\21\0\4\20\10\0"+
    "\u018c\20\4\0\153\20\5\0\15\20\3\0\11\20\7\0"+
    "\12\20\3\0\2\20\306\0\5\20\3\0\6\20\10\0"+
    "\10\20\2\0\7\20\36\0\4\20\224\0\3\20\273\0"+
    "\125\20\1\0\107\20\1\0\2\20\2\0\1\20\2\0"+
    "\2\20\2\0\4\20\1\0\14\20\1\0\1\20\1\0"+
    "\7\20\1\0\101\20\1\0\4\20\2\0\10\20\1\0"+
    "\7\20\1\0\34\20\1\0\4\20\1\0\5\20\1\0"+
    "\1\20\3\0\7\20\1\0\u0154\20\2\0\31\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\10\20\2\0\62\14\67\20\4\0\62\20"+
    "\10\0\1\20\16\0\1\20\26\0\5\20\1\0\17\20"+
    "\120\0\7\20\1\0\21\20\2\0\7\20\1\0\2\20"+
    "\1\0\5\20\325\0\55\20\3\0\16\20\2\0\12\14"+
    "\4\0\1\20\u0171\0\60\20\12\14\6\0\305\20\13\0"+
    "\7\20\51\0\114\20\4\0\12\14\246\0\4\20\1\0"+
    "\33\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\12\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0"+
    "\1\20\4\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\3\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\2\0\4\20\1\0\7\20\1\0"+
    "\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1\0"+
    "\21\20\5\0\3\20\1\0\5\20\1\0\21\20\164\0"+
    "\32\20\6\0\32\20\6\0\32\20\166\0\327\20\51\0"+
    "\65\20\13\0\336\20\2\0\u0182\20\16\0\u0131\20\37\0"+
    "\36\20\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\2\12\1\14"+
    "\1\15\2\14\1\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\2\12\1\30\1\31\1\33\1\0\2\12\1\24"+
    "\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u014a\0\u0186\0\u01a4"+
    "\0\u014a\0\u01c2\0\u01e0\0\u01fe\0\u014a\0\u014a\0\u021c\0\u023a"+
    "\0\u0258\0\u0276\0\u0294\0\u014a\0\u02b2\0\u02d0\0\u02ee\0\u030c"+
    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u032a\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u014a\0\u01fe\0\u01fe\0\u0348\0\u0366\0\u0294"+
    "\0\u0294\0\u014a\0\u0384\0\u03a2\0\u03c0\0\u014a\0\u021c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\3\15\1\14\1\16\5\14\1\17\1\20\2\14"+
    "\1\21\1\20\2\14\10\20\16\14\1\17\1\22\3\14"+
    "\1\22\2\14\10\22\16\14\1\17\1\23\3\14\1\23"+
    "\2\14\10\23\4\14\3\15\1\24\2\14\1\25\1\14"+
    "\1\26\1\27\1\17\1\30\3\14\1\27\2\14\2\27"+
    "\1\31\3\27\1\32\1\27\3\14\2\33\1\34\10\33"+
    "\1\35\22\33\10\36\1\37\2\36\1\17\22\36\1\14"+
    "\3\15\7\14\1\17\1\40\1\41\1\42\1\14\1\40"+
    "\2\14\10\40\1\43\1\44\2\14\3\15\7\14\1\17"+
    "\1\40\1\41\1\42\1\14\1\40\2\14\10\40\1\45"+
    "\1\44\2\14\3\15\7\14\1\17\1\46\1\41\1\42"+
    "\1\14\1\46\2\14\10\46\1\45\1\47\2\14\3\15"+
    "\1\14\1\16\5\14\1\17\1\46\1\14\1\42\1\21"+
    "\1\46\2\14\10\46\1\45\1\47\2\14\3\15\1\14"+
    "\1\16\1\50\5\14\1\51\2\14\1\21\1\51\2\14"+
    "\10\51\1\14\1\51\1\14\37\0\3\15\42\0\1\52"+
    "\2\0\1\53\36\0\1\20\3\0\1\20\2\0\10\20"+
    "\17\0\1\22\3\0\1\22\2\0\10\22\17\0\1\23"+
    "\3\0\1\23\2\0\10\23\3\0\2\54\2\0\1\55"+
    "\30\54\13\0\1\27\1\0\1\27\3\0\1\27\2\0"+
    "\10\27\15\0\1\27\1\0\1\30\3\0\1\27\2\0"+
    "\10\27\15\0\1\27\1\0\1\27\3\0\1\27\2\0"+
    "\1\56\7\27\15\0\1\27\1\0\1\27\3\0\1\27"+
    "\2\0\4\27\1\57\3\27\3\0\2\33\1\0\35\33"+
    "\1\0\5\33\1\60\2\33\1\61\22\33\10\36\1\0"+
    "\2\36\1\0\22\36\13\0\1\62\36\0\1\40\3\0"+
    "\1\40\1\63\1\0\10\40\17\0\1\46\3\0\1\46"+
    "\1\63\1\0\10\46\15\0\1\27\1\0\1\27\3\0"+
    "\1\27\2\0\3\27\1\64\4\27\15\0\1\27\1\0"+
    "\1\27\3\0\1\27\2\0\7\27\1\65\25\0\1\66"+
    "\25\0\1\27\1\0\1\27\3\0\1\27\2\0\5\27"+
    "\1\65\2\27\15\0\1\27\1\0\1\27\3\0\1\27"+
    "\2\0\1\27\1\67\6\27\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[990];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\2\1\1\11\3\1\2\11"+
    "\5\1\1\11\4\1\5\11\1\1\5\11\1\0\5\1"+
    "\1\11\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    ArrayList<Integer> stateStack = new ArrayList<>();

    public _TelosysLexer() {
      this((java.io.Reader)null);
    }

    public void pushCurrentState(){
        stateStack.add(yystate());
    }

    public Integer popState(){
        return stateStack.remove(stateStack.size()-1);
    }

    public void logText(){
        System.out.println("State: " + yystate() + ", Matched Input: " + yytext());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TelosysLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("BAD CHARACTER"); logText(); return BAD_CHARACTER;
            }
          // fall through
          case 29: break;
          case 2:
            { logText(); return IGNORED;
            }
          // fall through
          case 30: break;
          case 3:
            { logText(); pushCurrentState(); yybegin(TAG); return SHARP;
            }
          // fall through
          case 31: break;
          case 4:
            { logText(); pushCurrentState(); yybegin(ENTITY); return ENTITY_NAME;
            }
          // fall through
          case 32: break;
          case 5:
            { logText(); pushCurrentState(); yybegin(ANNOTATION); return AT;
            }
          // fall through
          case 33: break;
          case 6:
            { logText(); yybegin(POST_DECORATOR_NAME); return ANNOTATION_NAME;
            }
          // fall through
          case 34: break;
          case 7:
            { logText(); yybegin(POST_DECORATOR_NAME); return TAG_NAME;
            }
          // fall through
          case 35: break;
          case 8:
            { logText(); yybegin(popState()); return new TelosysElementType(")");
            }
          // fall through
          case 36: break;
          case 9:
            { logText(); return new TelosysElementType(",");
            }
          // fall through
          case 37: break;
          case 10:
            { logText(); return NAME;
            }
          // fall through
          case 38: break;
          case 11:
            { logText(); return NUMBER;
            }
          // fall through
          case 39: break;
          case 12:
            { logText(); return COMMENT_TEXT;
            }
          // fall through
          case 40: break;
          case 13:
            { logText(); System.out.print("EOL"); yybegin(popState()); return EOL;
            }
          // fall through
          case 41: break;
          case 14:
            { logText(); pushCurrentState(); yybegin(ATTRIBUTE); return ATTRIBUTE_NAME;
            }
          // fall through
          case 42: break;
          case 15:
            { logText(); yybegin(ATTRIBUTE_TYPE); return new TelosysElementType(":");
            }
          // fall through
          case 43: break;
          case 16:
            { logText(); yybegin(popState()); return new TelosysElementType(";");
            }
          // fall through
          case 44: break;
          case 17:
            { logText(); yybegin(ENTITY_BODY); return new TelosysElementType("{");
            }
          // fall through
          case 45: break;
          case 18:
            { logText(); yybegin(popState()); return new TelosysElementType("}");
            }
          // fall through
          case 46: break;
          case 19:
            { return new TelosysTokenType("{");
            }
          // fall through
          case 47: break;
          case 20:
            { logText(); return TelosysTypes.ATTRIBUTE_TYPE;
            }
          // fall through
          case 48: break;
          case 21:
            { return new TelosysTokenType("}");
            }
          // fall through
          case 49: break;
          case 22:
            { logText(); yybegin(DECORATOR_CONTENT); return new TelosysElementType("(");
            }
          // fall through
          case 50: break;
          case 23:
            { logText(); yybegin(popState()); yypushback(1);
            }
          // fall through
          case 51: break;
          case 24:
            { logText(); pushCurrentState(); yybegin(BLOCK_COMMENT); return new TelosysElementType("/*");
            }
          // fall through
          case 52: break;
          case 25:
            { logText(); pushCurrentState(); yybegin(LINE_COMMENT); return new TelosysElementType("//");
            }
          // fall through
          case 53: break;
          case 26:
            { logText(); return STRING;
            }
          // fall through
          case 54: break;
          case 27:
            { logText(); yybegin(popState()); return new TelosysElementType("*/");
            }
          // fall through
          case 55: break;
          case 28:
            { logText(); return BOOLEAN;
            }
          // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
